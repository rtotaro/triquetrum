/*******************************************************************************
 * Copyright (c)  2016 Totaro Rodolfo
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *    Rodolfo Totaro - initial API and implementation and/or initial documentation
 *******************************************************************************/
/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.triquetrum.commands.generator;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.graphiti.dt.IDiagramTypeProvider;
import org.eclipse.graphiti.features.ICreateFeature;
import org.eclipse.graphiti.features.IFeatureProvider;
import org.eclipse.graphiti.features.context.impl.AddContext;
import org.eclipse.graphiti.features.context.impl.CreateContext;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.ui.editor.DiagramBehavior;
import org.eclipse.swt.widgets.Display;
import org.eclipse.triquetrum.commands.tqcl.Command;
import org.eclipse.triquetrum.commands.tqcl.Insert;
import org.eclipse.triquetrum.commands.tqcl.NamedObj;
import org.eclipse.triquetrum.commands.tqcl.TriquetrumScript;
import org.eclipse.triquetrum.workflow.editor.TriqDiagramEditor;
import org.eclipse.triquetrum.workflow.editor.TriqDiagramTypeProvider;
import org.eclipse.triquetrum.workflow.editor.TriqFeatureProvider;
import org.eclipse.triquetrum.workflow.editor.features.ModelElementCreateFeature;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IEditorReference;
import org.eclipse.ui.PlatformUI;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class TqclGenerator extends AbstractGenerator {

	private Map<String, ModelElementCreateFeature> featuresMap = new HashMap<>();

	TriqDiagramEditor triqDiagramEditor = null;

	@Override
	public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		
		Display.getDefault().syncExec(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				IEditorReference[] editorReferences = PlatformUI.getWorkbench().getActiveWorkbenchWindow()
						.getActivePage().getEditorReferences();
				for (IEditorReference iEditorReference : editorReferences) {

					IEditorPart editor = iEditorReference.getEditor(true);
					if (editor instanceof TriqDiagramEditor) {
						triqDiagramEditor = (TriqDiagramEditor) editor;
						break;
					}
				}
			}
		});
		DiagramBehavior diagramBehavior = triqDiagramEditor.getDiagramBehavior();
		IDiagramTypeProvider diagramTypeProvider = triqDiagramEditor.getDiagramTypeProvider();
		IFeatureProvider featureProvider = diagramTypeProvider.getFeatureProvider();
		Diagram diagram = diagramTypeProvider.getDiagram();
		
		initFeatureMap(featureProvider);

		EList<EObject> contents = resource.getContents();
		for (EObject eObject : contents) {
			if (eObject instanceof TriquetrumScript) {

				// Graphiti.getLinkService().getLinkForPictogramElement(triqDiagramEditor.getDiagramBehavior().getDiagramContainer());
				// TriqFactory triqFactory = TriqFactoryImpl.init();
				
				
				TriquetrumScript triquetrumScript = (TriquetrumScript) eObject;
				final EList<Command> commands = triquetrumScript.getCommands();

//				editingDomain.
				
				for (Command command : commands) {
					if (command instanceof Insert) {
						InsertActor(diagramBehavior, diagram, command);
						
						System.out.println();

					}

				}

			}

		}

		// Iterator<Greeting> filtered =
		// Iterators.filter(resource.getAllContents(), Greeting.class);
		// Iterator<String> names = Iterators.transform(filtered, new
		// Function<Greeting, String>() {
		//
		// @Override
		// public String apply(Greeting greeting) {
		// return greeting.getName();
		// }
		// });
		// fsa.generateFile("greetings.txt", "People to greet: " +
		// IteratorExtensions.join(names, ", "));
	}

	private void InsertActor(DiagramBehavior diagramBehavior, Diagram diagram, Command command) {
		Insert insert = (Insert) command;
		NamedObj name = insert.getName();
		AddContext addContext = new AddContext();
		NamedObj obj = insert.getObj();
		String paleteKey = obj.getName();

		ModelElementCreateFeature modelElementCreateFeature = featuresMap
				.get(paleteKey.replaceAll("\"", ""));
		CreateContext createContext = new CreateContext();
		createContext.setTargetContainer(diagram);
		Object executeFeature = diagramBehavior.executeFeature(modelElementCreateFeature, createContext);
	}

	private void initFeatureMap(IFeatureProvider featureProvider) {
		if (featuresMap.isEmpty()) {
			ICreateFeature[] createFeatures = featureProvider.getCreateFeatures();
			for (ICreateFeature feature : createFeatures) {
				if (feature instanceof ModelElementCreateFeature) {
					ModelElementCreateFeature modelfeature = (ModelElementCreateFeature) feature;
					String key = modelfeature.getGroup() + "." + modelfeature.getName();
					featuresMap.put(key, modelfeature);
				}
			}
		}
	}
}

/*******************************************************************************
 * Copyright (c)  2016 Totaro Rodolfo
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *    Rodolfo Totaro - initial API and implementation and/or initial documentation
 *******************************************************************************/
/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.triquetrum.commands.generator;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.edit.command.SetCommand;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.graphiti.dt.IDiagramTypeProvider;
import org.eclipse.graphiti.features.ICreateFeature;
import org.eclipse.graphiti.features.IFeatureProvider;
import org.eclipse.graphiti.features.context.impl.AddContext;
import org.eclipse.graphiti.features.context.impl.CreateConnectionContext;
import org.eclipse.graphiti.features.context.impl.CreateContext;
import org.eclipse.graphiti.mm.pictograms.Anchor;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.mm.pictograms.Shape;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.graphiti.ui.editor.DiagramBehavior;
import org.eclipse.swt.widgets.Display;
import org.eclipse.triquetrum.commands.tqcl.Command;
import org.eclipse.triquetrum.commands.tqcl.Connect;
import org.eclipse.triquetrum.commands.tqcl.Insert;
import org.eclipse.triquetrum.commands.tqcl.NamedObj;
import org.eclipse.triquetrum.commands.tqcl.Parameter;
import org.eclipse.triquetrum.commands.tqcl.TriquetrumScript;
import org.eclipse.triquetrum.workflow.editor.TriqDiagramEditor;
import org.eclipse.triquetrum.workflow.editor.TriqDiagramTypeProvider;
import org.eclipse.triquetrum.workflow.editor.TriqFeatureProvider;
import org.eclipse.triquetrum.workflow.editor.features.ConnectionCreateFeature;
import org.eclipse.triquetrum.workflow.editor.features.ModelElementCreateFeature;
import org.eclipse.triquetrum.workflow.model.Actor;
import org.eclipse.triquetrum.workflow.model.CompositeActor;
import org.eclipse.triquetrum.workflow.model.Port;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IEditorReference;
import org.eclipse.ui.PlatformUI;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import ptolemy.actor.TypedAtomicActor;
import ptolemy.kernel.util.AbstractSettableAttribute;
import ptolemy.kernel.util.Attribute;
import ptolemy.kernel.util.IllegalActionException;

/**
 * Generates code from your model files on save.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class TqclGenerator extends AbstractGenerator {

	private Map<String, ModelElementCreateFeature> featuresMap = new HashMap<>();

	TriqDiagramEditor triqDiagramEditor = null;

	@Override
	public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		
		Display.getDefault().syncExec(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				IEditorReference[] editorReferences = PlatformUI.getWorkbench().getActiveWorkbenchWindow()
						.getActivePage().getEditorReferences();
				for (IEditorReference iEditorReference : editorReferences) {

					IEditorPart editor = iEditorReference.getEditor(true);
					if (editor instanceof TriqDiagramEditor) {
						triqDiagramEditor = (TriqDiagramEditor) editor;
						break;
					}
				}
			}
		});
		DiagramBehavior diagramBehavior = triqDiagramEditor.getDiagramBehavior();
		IDiagramTypeProvider diagramTypeProvider = triqDiagramEditor.getDiagramTypeProvider();
		IFeatureProvider featureProvider = diagramTypeProvider.getFeatureProvider();
		Diagram diagram = diagramTypeProvider.getDiagram();
		
		
		
		initFeatureMap(featureProvider);

		EList<EObject> contents = resource.getContents();
		for (EObject eObject : contents) {
			if (eObject instanceof TriquetrumScript) {

				TriquetrumScript triquetrumScript = (TriquetrumScript) eObject;
				final EList<Command> commands = triquetrumScript.getCommands();

				for (Command command : commands) {
					if (command instanceof Insert) {
						insertActor(diagramBehavior, diagram, command);
					}
					else if (command instanceof Connect) {
						Connect connect = (Connect) command;
						createConnection(diagramBehavior, featureProvider, diagram, connect);
					}

				}

			}

		}

	}

	private void createConnection(DiagramBehavior diagramBehavior, IFeatureProvider featureProvider, Diagram diagram,
			Connect connect) {
		ConnectionCreateFeature feature = new ConnectionCreateFeature(featureProvider);
		CreateConnectionContext createContext = new CreateConnectionContext();
		EList<Shape> children = diagram.getChildren();
		
		for (Shape shape : children) {
			EList<Anchor> anchors = shape.getAnchors();
			for (Anchor anchor : anchors) {
				EObject bo = Graphiti.getLinkService().getBusinessObjectForLinkedPictogramElement(anchor);
				if (bo instanceof Port) {
					Port port = (Port) bo;
					String fullName = port.getFullName();
					if(fullName.endsWith(connect.getFrom().getName()))
					{
						createContext.setSourceAnchor(anchor);
					}
					if(fullName.endsWith(connect.getTo().getName()))
					{
						createContext.setTargetAnchor(anchor);
					}
				}
			}
		}
		
		diagramBehavior.executeFeature(feature, createContext);
	}

	private void insertActor(DiagramBehavior diagramBehavior, Diagram diagram, Command command) {
		Insert insert = (Insert) command;
		NamedObj obj = insert.getObj();
		String paleteKey = obj.getName();
		String actorInstanceName = insert.getName().getName();
		
		EList<Parameter> parameters = insert.getParameters();
		

		ModelElementCreateFeature modelElementCreateFeature = featuresMap
				.get(paleteKey.replaceAll("\"", ""));
		CreateContext createContext = new CreateContext();
		createContext.setTargetContainer(diagram);
		Object executeFeature = diagramBehavior.executeFeature(modelElementCreateFeature, createContext);
		
		
		
		EObject businessObjectForLinkedPictogramElement = Graphiti.getLinkService().getBusinessObjectForLinkedPictogramElement(diagram);
		if (businessObjectForLinkedPictogramElement instanceof CompositeActor) {
			CompositeActor mainActor = (CompositeActor) businessObjectForLinkedPictogramElement;
			org.eclipse.triquetrum.workflow.model.NamedObj child = mainActor.getChild(modelElementCreateFeature.getCreateName());
			TransactionalEditingDomain editingDomain = diagramBehavior.getEditingDomain();
			if (child instanceof Actor) {
				Actor actor = (Actor) child;
				Map<String, org.eclipse.triquetrum.workflow.model.Parameter> modelParameters = new HashMap<>();
				for (org.eclipse.triquetrum.workflow.model.Parameter parameter : actor.getParameters()) {
					modelParameters.put(parameter.getName(), parameter);
				}
//				EStructuralFeature eStructuralFeatureName = actor.eClass().getEStructuralFeature("name");
//				editingDomain.getCommandStack().execute(new SetCommand(editingDomain, actor, eStructuralFeatureName, actorInstanceName));
				
				for (Parameter parameter : parameters) {
					String paramName = parameter.getId().getName();
					org.eclipse.triquetrum.workflow.model.Parameter parameterToSet = modelParameters.get(paramName);
					EStructuralFeature eStructuralFeatureExpression = parameterToSet.eClass().getEStructuralFeature("expression");
					editingDomain.getCommandStack().execute(new SetCommand(editingDomain, parameterToSet,eStructuralFeatureExpression ,parameter.getValue()));
				}
				
			}
			
		}
		
		
		
		System.out.println(executeFeature);
	}

	private void initFeatureMap(IFeatureProvider featureProvider) {
		if (featuresMap.isEmpty()) {
			ICreateFeature[] createFeatures = featureProvider.getCreateFeatures();
			for (ICreateFeature feature : createFeatures) {
				if (feature instanceof ModelElementCreateFeature) {
					ModelElementCreateFeature modelfeature = (ModelElementCreateFeature) feature;
					String key = modelfeature.getGroup() + "." + modelfeature.getName();
					featuresMap.put(key, modelfeature);
				}
			}
		}
	}
}
